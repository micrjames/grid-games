var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Timer = /** @class */ (function () {
    function Timer(interval) {
        this.interval = interval;
    }
    Timer.prototype.start = function (cb) {
        this.timerID = setInterval(cb, this.interval);
    };
    Timer.prototype.cancel = function () {
        clearInterval(this.timerID);
    };
    return Timer;
}());
var Countdown = /** @class */ (function (_super) {
    __extends(Countdown, _super);
    function Countdown(secsRemaining, doEachSec, doAtEnd) {
        var _this = _super.call(this, 1000) || this;
        _this.secsRemaining = secsRemaining;
        _super.prototype.start.call(_this, function () {
            _this.secsRemaining--;
            if (doEachSec)
                doEachSec(_this.secsRemaining);
            if (_this.secsRemaining == 0) {
                _super.prototype.cancel.call(_this);
                // countdown is over when the timer clock runs out
                if (doAtEnd)
                    doAtEnd();
            }
        });
        return _this;
    }
    Object.defineProperty(Countdown.prototype, "seconds", {
        get: function () {
            return this.secsRemaining;
        },
        enumerable: false,
        configurable: true
    });
    return Countdown;
}(Timer));
exports.Countdown = Countdown;
